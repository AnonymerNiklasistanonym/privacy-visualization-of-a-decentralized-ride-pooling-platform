{
  "active": "Active {name}",
  "common.footer": "Service Computing Department > Institute of Architecture of Application Systems > University of Stuttgart",
  "confidentialityVisualizer.name": "Confidentiality Visualizer",
  "connected": "Connected {name}",
  "current": "Current {name}",
  "data.access.localStorage": "Stores this data",
  "data.access.message.currentSpectatorCantSeeData": "The current spectator {name} can't see {data}, click for more information",
  "data.access.message.hiddenFor": "Hidden for {name}",
  "data.access.message.visibleFor": "Visible for {name}",
  "data.access.message.whoCanSee": "Who can see {name} from ",
  "data.access.none": "Has no access",
  "data.access.owner": "Data Owner",
  "data.access.transitive": "Can either request the data or deduce it because of it's situation",
  "data.id": "ID",
  "data.pseudonym": "Pseudonym",
  "data.rating": "Rating",
  "data.section.carDetails": "Car Details",
  "data.section.carDetails.vin": "VIN (Vehicle Identification Number)",
  "data.section.carDetails.vnp": "Vehicle Number Plate",
  "data.section.companyDetails": "Company Details",
  "data.section.companyDetails.company": "Company Name",
  "data.section.personalDetails": "Personal Details",
  "data.section.personalDetails.address.home": "Home Address",
  "data.section.personalDetails.dob": "Date of birth",
  "data.section.personalDetails.email": "Email Address",
  "data.section.personalDetails.fullName": "Full Name",
  "data.section.personalDetails.gender": "Gender",
  "data.section.personalDetails.phone": "Phone Number",
  "data.section.queries": "Queries",
  "data.type": "Type",
  "dataAccess.NotPubliclyAvailable": "This data is not publicly available",
  "dataAccess.driver.as": "Can get the pseudonym of the driver from the public blockchain entry since it knows all pseudonyms of the customer. Can resolve the pseudonym of the driver since it knows all pseudonyms of all Ride Providers.",
  "dataAccess.driverPassenger.ms": "Knows the pseudonyms of both participants since it held the auction but can't resolve them to the actual participants",
  "dataAccess.passenger.as": "Can get the pseudonym of the driver from the public blockchain entry since it knows all pseudonyms of the Ride Provider. Can resolve the pseudonym of the passenger since it knows all pseudonyms of all Customers.",
  "dataAccess.personalData.as": "Stores it locally to prevent multiple accounts and to contact this participant",
  "dataAccess.personalData.ms": "Only knows the participants pseudonym but no personal information",
  "dataAccess.queryData.rating.as": "TODO",
  "dataAccess.queryData.rating.participant": "TODO",
  "dataAccess.queryData.rating.rounded.as": "TODO",
  "dataAccess.queryData.rating.rounded.ms": "TODO",
  "dataAccess.rideRequestData.as": "Can find out about the ride request by checking the public blockchain since it knows all pseudonyms connected to the participants",
  "dataAccess.rideRequestData.customer": "Created the ride request but can not resolve the ride provider pseudonym",
  "dataAccess.rideRequestData.ms": "Stores the pseudonyms but cannot resolve them",
  "dataAccess.rideRequestData.rideProvider": "Bid on the ride request but can not resolve the customer pseudonym",
  "errors": "Errors",
  "getacar.blockchain.cryptoExchange": "Crypto Exchange",
  "getacar.blockchain.cryptoExchange.description": "enables participants to pay and get paid",
  "getacar.blockchain.rideContractService": "Ride Contract Service",
  "getacar.blockchain.rideContractService.description": "create Smart Contracts between participants on the blockchain",
  "getacar.blockchain.smartContract.connectedRideRequest": "Connected to selected Smart Contract",
  "getacar.blockchain.smartContract.selectedChanged": "Changed selected smart contract to {name}",
  "getacar.foundation": "GETACAR foundation",
  "getacar.foundation.description": "verifies Authentication Services",
  "getacar.name": "GETACAR: a privacy-preserving platform for ride-pooling",
  "getacar.participant.clearSelected": "Clear selected participant",
  "getacar.participant.customer": "Customer",
  "getacar.participant.customer.description": "requests rides (human)",
  "getacar.participant.customer.name": "Customer ({name})",
  "getacar.participant.customer.passenger.message.dataAccess": "Since this Customer is the passenger of the Ride Provider they know this data",
  "getacar.participant.customer.plural": "Customers",
  "getacar.participant.data.personal.authAccess": "Every participant registers at an Authentication Service with their personal data",
  "getacar.participant.data.rating": "Rating",
  "getacar.participant.data.rating.notAvailable": "No ratings available yet",
  "getacar.participant.data.rating.rounded": "Rounded Rating",
  "getacar.participant.message.connected.plural": "Connected Participants",
  "getacar.participant.message.pinned.plural": "Pinned Participants",
  "getacar.participant.plural": "Participants",
  "getacar.participant.resetFilter.smartContracts": "Reset participant filter for smart contracts",
  "getacar.participant.rideProvider": "Ride Provider",
  "getacar.participant.rideProvider.description": "provides rides (human/autonomous vehicle)",
  "getacar.participant.rideProvider.driver": "Driver",
  "getacar.participant.rideProvider.driver.message.connected": "Connected Driver",
  "getacar.participant.rideProvider.driver.message.dataAccess": "Since this Ride Provider is the driver of the Customer they know this data",
  "getacar.participant.rideProvider.name": "Ride Provider ({name})",
  "getacar.participant.rideProvider.passenger": "Passenger",
  "getacar.participant.rideProvider.passengerNumber": "Passenger #{name}",
  "getacar.participant.rideProvider.passengers": "Passengers",
  "getacar.participant.rideProvider.plural": "Ride Provider",
  "getacar.participant.selected": "Selected participant",
  "getacar.participant.selectedChanged": "Changed selected participant to {name}",
  "getacar.participant.selectedShow": "Show selected participant",
  "getacar.rideRequest": "Ride Request",
  "getacar.rideRequest.location.dropoff": "Dropoff location",
  "getacar.rideRequest.location.pickup": "Pickup location",
  "getacar.rideRequest.message.connected.plural": "Connected Ride Requests",
  "getacar.rideRequest.message.creator": "Created the Ride Request",
  "getacar.rideRequest.message.ranAuction": "Ran the auction initiated by the Customer",
  "getacar.rideRequest.plural": "Ride Requests",
  "getacar.service": "Service",
  "getacar.service.auth": "Authentication Service",
  "getacar.service.auth.description": "adds layer of privacy with generated pseudonyms for all participants ",
  "getacar.service.match": "Matching Service",
  "getacar.service.match.description": "pair participants via anonymous auctions",
  "getacar.service.plural": "Services",
  "getacar.smartContract": "Smart Contract",
  "getacar.smartContract.plural": "Smart Contracts",
  "getacar.spectator": "Spectator",
  "getacar.spectator.alreadySelected": "Spectator already selected",
  "getacar.spectator.changed": "Changed spectator to {name}",
  "getacar.spectator.current": "Current spectator",
  "getacar.spectator.everything": "Everything",
  "getacar.spectator.filter": "Filter {name}",
  "getacar.spectator.message.auctionCreator": "Auction Creator",
  "getacar.spectator.message.auctionWinner": "Auction Winner",
  "getacar.spectator.message.change": "Change spectator",
  "getacar.spectator.message.changeTo": "Change spectator to {name}",
  "getacar.spectator.message.connected": "Connected {name}",
  "getacar.spectator.message.lastSelected": "Last selected {name}",
  "getacar.spectator.message.passenger": "Passenger",
  "getacar.spectator.message.passenger.dataAccess": "Since this Customer is a passenger of the Ride Provider this data about them is known to them",
  "getacar.spectator.message.pinned": "Pinned {name}",
  "getacar.spectator.message.selected": "Selected {name}",
  "getacar.spectator.message.show": "Show",
  "getacar.spectator.message.showMap": "Show spectator on map",
  "getacar.spectator.message.showParticipant": "Show {name}",
  "getacar.spectator.message.unableToResolvePseudonym": "Spectator is unable to resolve the pseudonym to participant",
  "getacar.spectator.public": "Public",
  "getacar.spectator.reset": "Reset spectator",
  "getacar.spectator.service.authentication": "Authentication Service",
  "getacar.spectator.service.matching": "Matching Service",
  "getacar.spectator.spectate": "Spectate {name}",
  "getacar.spectator.this": "this {name}",
  "location.accessDenied": "Location access has been denied.",
  "location.cloaked": "Cloaked",
  "location.real": "Real",
  "location.showYour": "Show your location",
  "message.selected": "Selected {name}",
  "message.show": "Show {name}",
  "other": "Other",
  "page.about.content": "Based on the master thesis {GETACAR} and inspired by {CONFIDENTIALITY_VISUALIZER}",
  "page.about.description": "About this webapp",
  "page.about.title": "About",
  "page.home.description": "Visualization of the GETACAR Platform description [TODO]",
  "page.home.head.meta.description": "Next.js i18n example - English",
  "page.home.head.title": "Visualization GETACAR Platform",
  "page.home.search.changeLanguage": "Change language to {name}",
  "page.home.search.spectateAs": "Change the spectator to {name}",
  "page.home.search.switchPage": "Switch to page {name}",
  "page.home.search.switchTab": "Switch to tab {name}",
  "page.home.search.switchTheme": "Switch to {name} mode",
  "page.home.tab.blockchain.search": "Filter smart contracts by participant",
  "page.home.tab.blockchain.section.info.content": "These smart contracts are all publicly available. Select a smart contract to learn if the current spectator can resolve the pseudonymized data and what data they can access.",
  "page.home.tab.blockchain.section.info.title": "Public Blockchain Smart Contracts",
  "page.home.tab.blockchain.title": "Blockchain",
  "page.home.tab.guide.section.as.content": "TODO: Add presentation information about Authentication Service",
  "page.home.tab.guide.section.blockchain.title": "Blockchain",
  "page.home.tab.guide.section.cryptoExchange.content": "Enables platform participants to pay for the service (convert FIAT currency like Dollars/Euros, platform generally only uses crypto-based currency) and to convert the crypto payments back to FIAT currency.",
  "page.home.tab.guide.section.cryptoExchange.notes": "(Could be a security concern in case the crypto exchange does not accept the verification from the GETACAR platform and does instead require personal identification!)",
  "page.home.tab.guide.section.customer.content": "TODO: Add presentation information about Customer",
  "page.home.tab.guide.section.motivation.content": "TODO",
  "page.home.tab.guide.section.motivation.title": "Motivation",
  "page.home.tab.guide.section.ms.content": "TODO: Add presentation information about Matching Service",
  "page.home.tab.guide.section.other.foundation.content": "Central foundation that verifies every {AUTH_SERVICE}.",
  "page.home.tab.guide.section.other.title": "Other",
  "page.home.tab.guide.section.participants.title": "Participants",
  "page.home.tab.guide.section.public.content": "TODO",
  "page.home.tab.guide.section.rideContractService.content": "Runs on the public Blockchain and enables one {CUSTOMER} and one {RIDE_PROVIDER} to create a Smart Contract with each other using pseudonyms from an {AUTH_SERVICE} after a successful auction by a {MATCHING_SERVICE}. This public record does not only execute the payment between the participants but also allows for them to rate each other and exchange (e.g. encrypted) messages.",
  "page.home.tab.guide.section.rideProvider.content": "TODO: Add presentation information about Ride Provider",
  "page.home.tab.guide.section.services.title": "Services",
  "page.home.tab.guide.section.sources": "The idea/visualization is based on the WebApp {CONFIDENTIALITY_VISUALIZER}.",
  "page.home.tab.guide.section.stakeholders.blockchain.title": "Platform Blockchain Connection:",
  "page.home.tab.guide.section.stakeholders.other.title": "Other:",
  "page.home.tab.guide.section.stakeholders.participants.title": "Platform Participants:",
  "page.home.tab.guide.section.stakeholders.services.title": "Platform (decentralized) Services:",
  "page.home.tab.guide.section.stakeholders.title": "Stakeholders",
  "page.home.tab.guide.section.summary.content": "In short this platform connects two parties, {CUSTOMERS} that request rides and {RIDE_PROVIDERS} that provide rides, with the help of two decentralized services (namely an {AUTH_SERVICE} and a {MATCHING_SERVICE}) that use a public blockchain to store every confirmed ride in a smart contract. Decentralized and privacy-preserving {AUTH_SERVICE}s are used to verify all participating parties as well as provide accountability and prevent multiple identities. They create a new pseudonym (and access token) on each interaction with a {CUSTOMER} or {RIDE_PROVIDER}, which is then stored locally next to their necessary information. With the current access tokens and pseudonyms each party can now use a local {MATCHING_SERVICE} that is then trying to find a fitting match between one {CUSTOMER} and one {RIDE_PROVIDER}. If a match is approved by these two parties, a publicly visible contract is created on a blockchain as a smart contract using the pseudonymized data to preserve the parties identities to the public. Additionally this contract allows each party to rate each other.",
  "page.home.tab.guide.section.summary.title": "Summary",
  "page.home.tab.guide.title": "Guide",
  "page.home.tab.map.layer.currentPosition": "Current Position",
  "page.home.tab.map.layer.debugGraphDijkstra": "Debug: Dijkstra Graph",
  "page.home.tab.map.layer.debugGraphDijkstraGeometry": "Debug: Dijkstra Graph (geometry)",
  "page.home.tab.map.layer.debugGraphDijkstraPathfinder": "Debug: Dijkstra Graph (pathfinder)",
  "page.home.tab.map.search": "Search participants",
  "page.home.tab.map.section.info.content": "This map displays all participants connected to the platform. Select a participant to learn what data the current spectator can access.",
  "page.home.tab.map.section.info.title": "Participants World Map",
  "page.home.tab.map.title": "Map",
  "page.home.tab.settings.card.brightness.mode": "{name} mode",
  "page.home.tab.settings.card.brightness.selectMode": "Select mode",
  "page.home.tab.settings.card.brightness.title": "Light/Dark mode",
  "page.home.tab.settings.card.debug.enableDebug": "Enable debug",
  "page.home.tab.settings.card.debug.title": "DEBUG",
  "page.home.tab.settings.card.fetch.title": "Fetching",
  "page.home.tab.settings.card.generic.baseUrl": "Base URL ({name})",
  "page.home.tab.settings.card.generic.cacheTimeout": "Cache timeout",
  "page.home.tab.settings.card.generic.updateRate": "Data update interval",
  "page.home.tab.settings.card.language.selectLanguage": "Select language",
  "page.home.tab.settings.card.language.title": "Language",
  "page.home.tab.settings.card.map.showTooltips": "Show tooltips",
  "page.home.tab.settings.card.storage.clearLocalStorage": "Clear local storage",
  "page.home.tab.settings.card.storage.clearSessionStorage": "Clear session storage",
  "page.home.tab.settings.card.storage.title": "Storage",
  "page.home.tab.settings.card.ui.gridSpacing": "Grid spacing",
  "page.home.tab.settings.card.ui.mapPopupVerticalScroll": "Vertical scroll in map popups",
  "page.home.tab.settings.card.ui.positionNavBar": "Navigation bar position",
  "page.home.tab.settings.card.ui.title": "User Interface",
  "page.home.tab.settings.connectedElements.title": "Connected Elements",
  "page.home.tab.settings.title": "Settings",
  "page.home.title": "Visualization of the GETACAR Platform",
  "pathfinder": "Pathfinder",
  "position.bottom": "Bottom",
  "position.top": "Top",
  "project.description": "Visualization of the privacy aspects of the decentralized, privacy-preserving ride-pooling platform concept {GETACAR}",
  "project.name": "Visualization of a privacy focused ride pooling platform concept ({GETACAR})",
  "pseudonym": "Pseudonym",
  "pseudonym.resolved": "Resolved pseudonym",
  "reset": "Reset {name}",
  "selected": "Selected {name}",
  "simulation": "Simulation",
  "theme.dark": "Dark",
  "theme.light": "Light"
}
