<h1>Current Simulation State</h1>

<div id="map"></div>

<scr{{!}}ipt>
  const fetchElement = async (endpoint) => {
    const result = await fetch(`http://localhost:{{port}}/json/${endpoint}`).then(data => data.json());
    console.debug(`requested endpoint '${endpoint}':`, result);
    return result;
  }
  window.addEventListener("load", async () => {
  const map = L.map('map').setView([{{startPos.lat}}, {{startPos.lon}}], {{startPos.zoom}});
  L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
  }).addTo(map);
  const currentElements = [];
  while (true) {
    for (const element of currentElements) {
      console.log(element);
      map.removeLayer(element);
    }
    currentElements.splice(0);
    // Fetch current actors and draw them on the map
    for (const customer of (await fetchElement("customers")).customers) {
      const marker = L.marker([customer.currentLocation.lat, customer.currentLocation.lon]).addTo(map);
      marker.bindPopup(`${customer.id} (${customer.type})`);
      currentElements.push(marker);
    }
    for (const rideProvider of (await fetchElement("ride_providers")).rideProviders) {
      const marker = L.marker([rideProvider.currentLocation.lat, rideProvider.currentLocation.lon]).addTo(map);
      marker.bindPopup(`${rideProvider.id} (${rideProvider.type})`);
      currentElements.push(marker);
    }
    for (const authenticationService of (await fetchElement("authentication_services")).authenticationServices) {
      const circle = L.circle([authenticationService.currentArea.lat, authenticationService.currentArea.lon], {
          fillColor: '#f03',
          fillOpacity: 0.2,
          radius: authenticationService.currentArea.radius
      }).addTo(map);
      circle.bindPopup(`${authenticationService.id} (${authenticationService.type})`);
      currentElements.push(circle);
    }
    for (const matchingService of (await fetchElement("matching_services")).matchingServices) {
      const circle = L.circle([matchingService.currentArea.lat, matchingService.currentArea.lon], {
          fillColor: '#03f',
          fillOpacity: 0.2,
          radius: matchingService.currentArea.radius
      }).addTo(map);
      circle.bindPopup(`${matchingService.id} (${matchingService.type})`);
      currentElements.push(circle);
    }
    // Wait for a little
    await new Promise(resolve => { setTimeout(resolve, 5 * 1000); });
  }
});

</scr{{!}}ipt>

<h2>Customers ({{customers.length}}) <a href="/json/customers">[json]</a></h2>
<ul class="scrolling">
  {{#each customers}}
    <li>{{> customer}}</li>
  {{/each}}
</ul>

<h2>Ride Providers ({{rideProviders.length}}) <a href="/json/ride_providers">[json]</a></h2>
<ul class="scrolling">
  {{#each rideProviders}}
    <li>{{> rideProvider}}</li>
  {{/each}}
</ul>

<h2>Authentication Services ({{authenticationServices.length}}) <a href="/json/authentication_services">[json]</a></h2>
<ul class="scrolling">
  {{#each authenticationServices}}
    <li>{{> authenticationService}}</li>
  {{/each}}
</ul>

<h2>Matching Services ({{matchingServices.length}}) <a href="/json/matching_services">[json]</a></h2>
<ul class="scrolling">
  {{#each matchingServices}}
    <li>{{> matchingService}}</li>
  {{/each}}
</ul>

<h2>Smart Contracts ({{smartContracts.length}}) <a href="/json/smart_contracts">[json]</a></h2>
<ul class="scrolling">
  {{#each smartContracts}}
    <li>{{> smartContract}}</li>
  {{/each}}
</ul>

<button onClick="window.location.reload();">Refresh Page</button>
